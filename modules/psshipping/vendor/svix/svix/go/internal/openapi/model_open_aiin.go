/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OpenAIIn struct for OpenAIIn
type OpenAIIn struct {
	Prompt string `json:"prompt"`
}

// NewOpenAIIn instantiates a new OpenAIIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenAIIn(prompt string) *OpenAIIn {
	this := OpenAIIn{}
	this.Prompt = prompt
	return &this
}

// NewOpenAIInWithDefaults instantiates a new OpenAIIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenAIInWithDefaults() *OpenAIIn {
	this := OpenAIIn{}
	return &this
}

// GetPrompt returns the Prompt field value
func (o *OpenAIIn) GetPrompt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prompt
}

// GetPromptOk returns a tuple with the Prompt field value
// and a boolean to check if the value has been set.
func (o *OpenAIIn) GetPromptOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Prompt, true
}

// SetPrompt sets field value
func (o *OpenAIIn) SetPrompt(v string) {
	o.Prompt = v
}

func (o OpenAIIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["prompt"] = o.Prompt
	}
	return json.Marshal(toSerialize)
}

type NullableOpenAIIn struct {
	value *OpenAIIn
	isSet bool
}

func (v NullableOpenAIIn) Get() *OpenAIIn {
	return v.value
}

func (v *NullableOpenAIIn) Set(val *OpenAIIn) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenAIIn) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenAIIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenAIIn(val *OpenAIIn) *NullableOpenAIIn {
	return &NullableOpenAIIn{value: val, isSet: true}
}

func (v NullableOpenAIIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenAIIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


