/*
 * Svix API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Oauth2GrantType the model 'Oauth2GrantType'
type Oauth2GrantType string

// List of Oauth2GrantType
const (
	OAUTH2GRANTTYPE_CLIENT_CREDENTIALS Oauth2GrantType = "clientCredentials"
)

var allowedOauth2GrantTypeEnumValues = []Oauth2GrantType{
	"clientCredentials",
}

func (v *Oauth2GrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Oauth2GrantType(value)
	for _, existing := range allowedOauth2GrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Oauth2GrantType", value)
}

// NewOauth2GrantTypeFromValue returns a pointer to a valid Oauth2GrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOauth2GrantTypeFromValue(v string) (*Oauth2GrantType, error) {
	ev := Oauth2GrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Oauth2GrantType: valid values are %v", v, allowedOauth2GrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Oauth2GrantType) IsValid() bool {
	for _, existing := range allowedOauth2GrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Oauth2GrantType value
func (v Oauth2GrantType) Ptr() *Oauth2GrantType {
	return &v
}

type NullableOauth2GrantType struct {
	value *Oauth2GrantType
	isSet bool
}

func (v NullableOauth2GrantType) Get() *Oauth2GrantType {
	return v.value
}

func (v *NullableOauth2GrantType) Set(val *Oauth2GrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2GrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2GrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2GrantType(val *Oauth2GrantType) *NullableOauth2GrantType {
	return &NullableOauth2GrantType{value: val, isSet: true}
}

func (v NullableOauth2GrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2GrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

